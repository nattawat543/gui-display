import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivymd.app import MDApp
from kivymd.uix.label import MDLabel

class ImuSubscriber(Node):

    def __init__(self):
        super().__init__('imu_subscriber')
        self.subscription = self.create_subscription(Imu, '/imu/data', self.listener_callback, 10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        roll = msg.orientation.x
        pitch = msg.orientation.y
        yaw = msg.orientation.z
        print(f"Roll: {roll}, Pitch: {pitch}, Yaw: {yaw}")
        # Update the GUI labels with the new data
        App.get_running_app().root.ids.roll_label.text = f"Roll: {roll}"
        App.get_running_app().root.ids.pitch_label.text = f"Pitch: {pitch}"
        App.get_running_app().root.ids.yaw_label.text = f"Yaw: {yaw}"

class ImuDisplayApp(MDApp):

    def build(self):
        # Set up the GUI
        layout = BoxLayout(orientation='vertical')
        layout.add_widget(MDLabel(text="IMU Data", halign="center", font_style="H4"))
        layout.add_widget(MDLabel(id="roll_label", text="Roll: "))
        layout.add_widget(MDLabel(id="pitch_label", text="Pitch: "))
        layout.add_widget(MDLabel(id="yaw_label", text="Yaw: "))
        return layout

def main():
    rclpy.init()
    imu_subscriber = ImuSubscriber()
    imu_display_app = ImuDisplayApp()
    imu_display_app.run()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
